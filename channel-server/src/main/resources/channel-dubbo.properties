#######################################################
####  <dubbo:application/> 
#######################################################
#当前应用名称
application.name=channel

#当前应用版本
application.version=1.0

#应用负责人
application.owner=jun

#组织名称(部门)
application.organization=com.zjht.channel

#服务分层对应的架构
application.architecture=

#应用环境，如：develop/test/product，不同环境使用不同的缺省值，以及作为只用于开发测试功能的限制条件 
application.environment=${ENV.APPLICATION.ENVIRONMENT}

#java字节码编译器
application.compiler=javassist

#日志输出方式，可选：slf4j,jcl,log4j,jdk
application.logger=slf4j



#######################################################
####  <dubbo:registry/> 
#######################################################
#注册中心的bean id
registry.id=channel_zookeeper

#注册中心服务器地址，如果地址没有端口缺省为9090
#同一集群内的多个地址用逗号分隔，如：ip:port,ip:port
registry.address=${EVN.ZK.ADDRESS}

#注册中心请求超时时间(毫秒) 
registry.timeout=5000

#注册中心会话超时时间(毫秒)，用于检测提供者非正常断线后的脏数据，
#比如用心跳检测的实现，此时间就是心跳间隔，不同注册中心实现不一样。 
registry.session=60000

#使用文件缓存注册中心地址列表及服务提供者列表
#应用重启时将基于此文件恢复
#注意：两个注册中心不能使用同一文件存储
registry.file=

#停止时等待通知完成时间(毫秒) 
registry.wait=0

#注册中心不存在时，是否报错 
registry.check=true

#是否向此注册中心注册服务，如果设为false，将只订阅，不注册
registry.register=false

#是否向此注册中心订阅服务，如果设为false，将只注册，不订阅
registry.subscribe=true

#服务是否动态注册
#如果设为false，注册后将显示后disable状态，需人工启用，
#并且服务提供者停止时，也不会自动取消册，需人工禁用。
registry.dynamic=true

#######################################################
####  <dubbo:consumer/> 
#######################################################
#负责人
consumer.owner=jun

#组织名称(部门)
consumer.group=com.zjht.channel

#远程服务调用超时时间(毫秒) 
consumer.timeout=10000

#远程服务调用重试次数，不包括第一次调用，不需要重试请设为0 
consumer.retries=0

#负载均衡策略，可选值：random,roundrobin,leastactive，分别表示：随机，轮循，最少活跃调用 
consumer.loadbalance=leastactive

#是否缺省异步执行，不可靠异步，只是忽略返回值，不阻塞执行线程 
consumer.async=false

#是否缺省泛化接口，如果为泛化接口，将返回GenericService 
consumer.generic=false

#启动时检查提供者是否存在，true报错，false忽略 
consumer.check=false

#生成动态代理方式，可选：jdk/javassist 
consumer.proxy=javassist

#每服务消费者每服务每方法最大并发调用数
consumer.actives=0

#集群方式，可选：failover/failfast/failsafe/failback/forking 
consumer.cluster=failover

#服务消费方远程调用过程拦截器名称，多个名称用逗号分隔 
consumer.filter=

#服务消费方引用服务监听器名称，多个名称用逗号分隔 
consumer.listener=

#服务调用者所在的分层。如：biz、dao、intl:web、china:acton。 
consumer.layer=dispater